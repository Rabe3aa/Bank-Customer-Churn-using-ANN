# -*- coding: utf-8 -*-
"""Bank customer churn using ANN.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1LpbSjxcmEJx4y7H5Pf7EfMIRzdAwG6wx
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from tensorflow import keras

df = pd.read_csv('/content/Churn_Modelling.csv')

df.head()

df.drop(['RowNumber', 'CustomerId', 'Surname'], axis = 1, inplace = True)

df.head()

df.isna().sum()

df.describe()

df.dtypes

df.Geography.unique()

df.groupby('Gender')['Exited'].sum().plot(kind='bar')

df.groupby('Gender')['EstimatedSalary'].mean()

df.groupby('Gender')['Balance'].sum().plot(kind='bar')

df.groupby('Gender')['IsActiveMember'].mean().plot(kind='pie')

from sklearn.preprocessing import MinMaxScaler

scaler = MinMaxScaler()
df[['CreditScore','Age','Tenure','Balance','NumOfProducts','EstimatedSalary']] = scaler.fit_transform(df[['CreditScore','Age','Tenure','Balance','NumOfProducts','EstimatedSalary']])

df.head()

df.Gender.replace({'Female':0, 'Male':1}, inplace = True)

df2 = pd.get_dummies(data=df, columns=['Geography'])

df2.head()

X = df2.drop('Exited', axis =1)
y = df2.Exited

from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 10)

X_train.shape

model = keras.Sequential([
                          keras.layers.Dense(100, input_shape = (12,), activation='relu'),
                          keras.layers.Dense(500, activation='relu'),
                          keras.layers.Dense(1000, activation='relu'),
                          keras.layers.Dense(5000, activation='relu'),
                          keras.layers.Dense(1, activation='sigmoid'),

])

model.compile(
    optimizer = 'adam',
    loss = 'binary_crossentropy',
    metrics = ['accuracy']
)

model.fit(X_train, y_train, epochs=100)

model.evaluate(X_test, y_test)

preds = model.predict(X_test)

for i in range(len(preds)):
  if preds[i] > 0.5:
    preds[i] = 1
  else:
    preds[i] = 0

from sklearn.metrics import confusion_matrix
import seaborn as sns

cm = confusion_matrix(y_test, preds)

sns.heatmap(cm, annot = True)